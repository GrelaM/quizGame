// const fetchData = () =>
//   new Promise<State>((resolve) => {
//     setTimeout(() => {
//       const rN = Math.floor(Math.random() * 4)

//       const primaryAnswersData = Object.values(randomQuestions[rN].answers)
//       function shuffle(array: any) {
//         array.sort(() => Math.random() - 0.5)
//       }
//       let shuffleAnswers = primaryAnswersData
//       shuffle(shuffleAnswers)

//       const serverData: State = {
//         time: 15,
//         category: randomQuestions[rN].category,
//         questionNumber: 1,
//         question: randomQuestions[rN].question,
//         hintsArray: randomQuestions[rN].hints,
//         answers: shuffleAnswers,
//         currentGameStatus: true,
//         nextQuestion: randomQuestions[rN].nextQuestion
//       }
//       resolve(serverData)
//     }, 1000)
//   })

// useEffect(() => {
//   fetchData()
//     .then((res) => {
//       setState(res)
//     })
//     .then(() => {
//       setIsLoading(false)
//       setHeader((current) => ({
//         ...current,
//         header: `Question #${Math.floor(Math.random() * 10)}`
//       }))
//     })
//     .catch((err) => {
//       console.log(err)
//     })
// }, [setHeader])

// // TIMER AND HINTS
// useEffect(() => {
//   // TIME COUNTING
//   const timeCounting = () => {
//     setCounter(time)
//     let leftTime: number
//     leftTime = time
//     const interval = setInterval(() => {
//       setCounter((counter) => counter - 1)
//       leftTime = leftTime - 1
//       if (leftTime === 0) {
//         clearInterval(interval)
//       }
//     }, 1000)
//   }

//   // HINTS
//   const hintsController= () => {
//     const nextHintTimer = (time / 3) * 1000
//     let number = 0

//     setHints([hintsArray[0]])
//     const interval = setInterval(() => {
//       if (number === 0) {
//         number += 1
//         setHints((hints) => hints.concat(hintsArray[1]))
//       } else if (number === 1) {
//         number += 1
//         setHints((hints) => hints.concat(hintsArray[2]))
//       } else if (number === 2) {
//         clearInterval(interval)
//         setIsLoading(true)

//         if (nextQuestion) {
//           setTimeout(() => {
//             fetchData()
//               .then((res) => {
//                 setState(res)
//               })
//               .then(() => {
//                 setIsLoading(false)
//                 setBtnState(false)
//                 setGameState((current) => ({
//                   ...current,
//                   header: `Question #${Math.floor(Math.random() * 10)}`
//                 }))
//               })
//               .catch((err) => {
//                 console.log(err)
//               })
//           }, 1500)
//         } else {
//           console.log('THE END!')
//           history.push('/result')
//           setGameState((current) => ({ ...current, header: 'THE END' }))
//         }
//       }
//     }, nextHintTimer)
//   }

//   if (state.currentGameStatus) {
//     setCounter(time)
//     timeCounting()
//     hintsController()
//   }
// }, [
//   state.currentGameStatus,
//   hintsArray,
//   nextQuestion,
//   time,
//   setGameState,
//   history
// ])












// if (nextQuestion) {
//   fetchDataHandler(gameId)
//     .then((passedData) => {
//       const time = passedData.data.question.time
//       const passedHints = passedData.data.question.hints
//       const shouldGameContinue = passedData.data.question.nextQuestion

//       setState(passedData.data.question)
//       setCounter(time)
//       setGameState((current) => ({
//         ...current,
//         header: `Question #${passedData.data.question.questionNumber}`
//       }))
//       setIsLoading(false)
//       timeCounting(time)
//       hintsController(passedHints, shouldGameContinue, time)
//     })
//     .catch((err) => {
//       console.log(err)
//     })
// } else {
//   console.log('THE END!')
//   // history.push('/result')
//   // setGameState((current) => ({ ...current, header: 'THE END' }))
// }

// useEffect(() => {
//   // TIME COUNTING
//   const timeCounting = (passedTime: number) => {
//     let leftTime: number
//     leftTime = passedTime
//     const interval = setInterval(() => {
//       setCounter((counter) => counter - 1)
//       leftTime = leftTime - 1
//       if (leftTime === 0) {
//         clearInterval(interval)
//       }
//     }, 1000)
//   }

//   // HINTS
//   const hintsController = (hintsArray: string[], nextQuestion: boolean, time: number) => {
//     const nextHintTimer = (time / 3) * 1000
//     let number = 0

//     setHints([hintsArray[0]])
//     const interval = setInterval(() => {
//       if (number === 0) {
//         number += 1
//         setHints((hints) => hints.concat(hintsArray[1]))
//       } else if (number === 1) {
//         number += 1
//         setHints((hints) => hints.concat(hintsArray[2]))
//       } else if (number === 2) {
//         clearInterval(interval)
//         setIsLoading(true)
//       }
//     }, nextHintTimer)
//   }

//   const gameId = gameState.gameId.slice(1)
//   axios
//     .get(`http://localhost:8080/singleplayer/game/%23` + gameId)
//     .then((res) => {
//       setState(res.data.question)
//       setCounter(res.data.question.time)
//       setGameState((current) => ({
//         ...current,
//         header: `Question #${res.data.question.questionNumber}`
//       }))
//       timeCounting(res.data.question.time)
//       hintsController(res.data.question.hints, res.data.question.nextQuestion, res.data.question.time)
//     })
//     .then(() => {
//       setIsLoading(false)
//     })
//     .catch((err) => console.log(err))
// }, [gameState.gameId, setGameState, history])
